# Generated by Django 5.2.7 on 2025-10-28 10:10

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('sdc_people', '0001_initial'), ('sdc_people', '0002_alter_person_membership_date'), ('sdc_people', '0003_remove_person_name_friendly_and_first_and_more'), ('sdc_people', '0004_alter_person_membership_date'), ('sdc_people', '0005_imagetype_image'), ('sdc_people', '0006_rename_linkexternalname_linkexternaltype'), ('sdc_people', '0007_personnotetype_alter_imagetype_options_and_more'), ('sdc_people', '0008_alter_person_options_alter_person_membershipclass'), ('sdc_people', '0009_personnote_expiration'), ('sdc_people', '0010_alter_personnote_expiration'), ('sdc_people', '0011_subposition_display_format'), ('sdc_people', '0012_alter_membershipclass_options'), ('sdc_people', '0013_alter_membershipclass_is_member_and_more'), ('sdc_people', '0014_alter_attendance_options'), ('sdc_people', '0015_alter_attendance_options_alter_person_options'), ('sdc_people', '0016_person_demog_is_veteran'), ('sdc_people', '0017_alter_subposition_display_format'), ('sdc_people', '0018_alter_subposition_display_format'), ('sdc_people', '0019_due_duestat'), ('sdc_people', '0020_remove_duestat_due_remove_duestat_person_and_more')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DistrictBorough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The name of the borough, which may be numeric', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'borough',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DistrictCongress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The number of the congressional district', max_length=5, verbose_name='name')),
            ],
            options={
                'verbose_name': 'congressional district',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DistrictMagisterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The name of the district', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'magisterial district',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DistrictPrecinct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The name of the district, which may be numeric', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'precinct',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DistrictStatehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The number of the house of delegates district', max_length=5, verbose_name='name')),
            ],
            options={
                'verbose_name': 'house of delegates district',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DistrictStatesenate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, help_text='The number of the district.  This can include letters (ex "11a").  Precede with "0"\'s as necessary to maintain sort order', max_length=5, verbose_name='number')),
                ('name', models.CharField(blank=True, help_text='The number of the state senate district', max_length=5, verbose_name='name')),
            ],
            options={
                'verbose_name': 'state senate district',
                'ordering': ('number', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Meetingtype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the type', max_length=100, verbose_name='name')),
                ('ordinal', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Before Medium'), (5, 'Medium'), (6, 'After Medium'), (7, 'Third Last'), (8, 'Second Last'), (9, 'Last')], default=5, help_text='A number assigned for sorting, with lowest number first', verbose_name='ordinal')),
            ],
            options={
                'ordering': ('ordinal', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Membershipclass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the membership class,', max_length=50, verbose_name='name')),
                ('is_member', models.IntegerField(choices=[(0, 'no'), (12, 'prospective'), (12, 'pending'), (111, 'yes')], default=0, help_text='If a person of this class is considered a member of the committee', verbose_name='is member')),
                ('is_quorum_member', models.IntegerField(choices=[(0, 'no'), (12, 'pending'), (111, 'yes')], default=0, help_text='If a person of this class can be part of a quorum', verbose_name='is quorum member')),
                ('is_participant', models.IntegerField(choices=[(0, 'no'), (111, 'yes')], default=0, help_text='If a person of this class participates and has interest in the committee - attends meetings, volunteers, etc..', verbose_name='is a participant')),
                ('ordinal', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Before Medium'), (5, 'Medium'), (6, 'After Medium'), (7, 'Third Last'), (8, 'Second Last'), (9, 'Last')], default=5, help_text='A number assigned for sorting, with lowest number first', verbose_name='ordinal')),
            ],
            options={
                'verbose_name': 'membership class',
                'ordering': ('ordinal', 'is_member', 'is_quorum_member', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Subcommitteetype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the type,', max_length=50, verbose_name='name')),
                ('ordinal', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Before Medium'), (5, 'Medium'), (6, 'After Medium'), (7, 'Third Last'), (8, 'Second Last'), (9, 'Last')], default=5, help_text='A number assigned for sorting, with lowest number first', verbose_name='ordinal')),
            ],
            options={
                'verbose_name': 'subcommittee type',
                'ordering': ('ordinal', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_held', models.DateField(default=datetime.date.today, help_text='The date of the meeting', verbose_name='date')),
                ('had_quorum', models.BooleanField(default=True, help_text='If the meeting had a quorum', verbose_name='quorum')),
                ('meetingtype', models.ForeignKey(help_text='The type of meeting', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.meetingtype')),
            ],
            options={
                'ordering': ('-when_held', 'meetingtype'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_first', models.CharField(help_text='The legal first name of the individual', max_length=50, verbose_name='first name')),
                ('name_formal', models.CharField(help_text='The full name of the individual including title (Mr. Ms, Dr., etc..), middle names, and suffixes, to the extent known', max_length=100, verbose_name='formal name')),
                ('name_friendly', models.CharField(help_text='Either the first name or a nickname that the person prefers to be addressed as in an informal setting', max_length=20, verbose_name='friendly name')),
                ('name_last', models.CharField(blank=True, help_text='The legal last name of the individual', max_length=50, verbose_name='last name')),
                ('primary_voice', models.CharField(blank=True, help_text='The phone number to be used for voice calls', max_length=50, verbose_name='primary voice phone number')),
                ('primary_text', models.CharField(blank=True, help_text='The phone number to be used for text messages', max_length=50, verbose_name='primary text phone number')),
                ('primary_email', models.EmailField(blank=True, help_text="The person's email address", max_length=250, verbose_name='primary email adddress')),
                ('voting_address', models.TextField(blank=True, help_text="The person's voting address", verbose_name='voting address')),
                ('mailing_address', models.TextField(blank=True, help_text="The person's mailing address if different from voting address", verbose_name='mailing address')),
                ('membership_date', models.DateField(blank=True, help_text='The date of the current class and status of membership, if applicable', null=True, verbose_name='membership status date')),
                ('application_date', models.DateField(blank=True, help_text="The date of this person's most recent membership application", null=True, verbose_name='Most Recent Application Date')),
                ('districtborough', models.ForeignKey(blank=True, help_text="The person's borough", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtborough', verbose_name='Borough')),
                ('districtcongress', models.ForeignKey(blank=True, help_text="The person's congressional district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtcongress', verbose_name='Congressional District')),
                ('districtmagisterial', models.ForeignKey(blank=True, help_text="The person's magisterial district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtmagisterial', verbose_name='magisterial district')),
                ('districtprecinct', models.ForeignKey(blank=True, help_text="The person's voting precinct", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtprecinct', verbose_name='precinct')),
                ('districtstatehouse', models.ForeignKey(blank=True, help_text="The person's House of Delegates district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtstatehouse', verbose_name='House of Delegates District')),
                ('districtstatesenate', models.ForeignKey(blank=True, help_text="The person's State Senate district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.districtstatesenate', verbose_name='State Senate District')),
                ('membershipclass', models.ForeignKey(help_text="The person's class of membership", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.membershipclass', verbose_name='membership class')),
                ('name_middles', models.CharField(default='', help_text="The person's middle names", max_length=100, verbose_name='middle names')),
                ('demog_is_veteran', models.BooleanField(default=False, help_text='Is this person a military veteran', verbose_name='veteran')),
                ('dues_next', models.DateField(blank=True, help_text='The next dues payment date for this individual', null=True, verbose_name='Next Dues Date')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
                'ordering': ('name_last', 'name_friendly', 'membershipclass'),
            },
        ),
        migrations.CreateModel(
            name='Subcommittee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the subcommittee,', max_length=50, verbose_name='name')),
                ('subcommitteetype', models.ForeignKey(blank=True, help_text='The type of submcommittee', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.subcommitteetype')),
            ],
            options={
                'verbose_name': 'subcommittee',
                'ordering': ('subcommitteetype', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Subposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the position,', max_length=50, verbose_name='name')),
                ('ordinal', models.IntegerField(choices=[(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Before Medium'), (5, 'Medium'), (6, 'After Medium'), (7, 'Third Last'), (8, 'Second Last'), (9, 'Last')], default=5, help_text='A number assigned for sorting', verbose_name='ordinal')),
                ('subcommittee', models.ForeignKey(help_text='The subcommittee to which this title is attached', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.subcommittee')),
                ('display_format', models.CharField(default='{position} {committee}', max_length=60)),
            ],
            options={
                'verbose_name': 'Position',
                'ordering': ('subcommittee', 'ordinal', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Submembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(help_text='The peson who is a member of the subcommittee', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.person')),
                ('subposition', models.ForeignKey(help_text='The committee and position in which the person is a member', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.subposition')),
            ],
            options={
                'verbose_name': 'Subcommittee Membership',
                'ordering': ('subposition', 'person'),
            },
        ),
        migrations.CreateModel(
            name='Imagetype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the type', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Image type',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Personnotetype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the type', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Type of note',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagefile', models.ImageField(upload_to='personimages', verbose_name='file')),
                ('person', models.ForeignKey(help_text='The person to which this link belongs', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.person')),
                ('imagetype', models.ForeignKey(blank=True, help_text='The type of image,', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.imagetype')),
            ],
        ),
        migrations.CreateModel(
            name='Linkexternaltype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the type,', max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Name for External Link',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Linkexternal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='The url of the link', verbose_name='url')),
                ('linkexternaltype', models.ForeignKey(blank=True, help_text='The name of the link,', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.linkexternaltype')),
                ('person', models.ForeignKey(help_text='The person to which this link belongs', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.person')),
            ],
            options={
                'verbose_name': 'External Link',
            },
        ),
        migrations.CreateModel(
            name='Personnote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, help_text='The content of the note', max_length=255)),
                ('when', models.DateTimeField(default=django.utils.timezone.now, help_text='The date of the note', verbose_name='date')),
                ('is_flagged', models.BooleanField(default=True, help_text='Flagged notes display an icon in the list view and appear by default in the detail view', verbose_name='is flagged')),
                ('author', models.ForeignKey(blank=True, help_text='The author of the note', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('person', models.ForeignKey(help_text='The person to which this link belongs', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.person')),
                ('personnotetype', models.ForeignKey(blank=True, help_text='The name of the link,', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdc_people.personnotetype')),
                ('expiration', models.DateField(blank=True, help_text='The expected or actual date when the note is no longer true', null=True, verbose_name='expiration date')),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting', models.ForeignKey(help_text='The meeting which the person attended', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.meeting')),
                ('person', models.ForeignKey(help_text='The person who attended the meeting', on_delete=django.db.models.deletion.CASCADE, to='sdc_people.person')),
            ],
            options={
                'ordering': ('person__name_last', 'meeting'),
            },
        ),
    ]
